import json
import os
from datetime import datetime
from rich.console import Console
import zipfile

console = Console()

class Mission:
    def __init__(self, data: dict):
        self.objectives = data.get("objectives", [])
        self.target = data.get("target", "")
        self.initial_access = data.get("initial_access", "")
        self.operation_mode = data.get("operation_mode", "")
        self.information_level = data.get("information_level", "")
        self.adversary_profile = data.get("adversary_profile", "")
        self.detail_level = data.get("detail_level", "")
        self.mission_context = data.get("mission_context", "")
        self.mission_duration = data.get("mission_duration", "")
        self.resources = data.get("resources", [])
        self.constraints = data.get("constraints", "")
        self.deliverables = data.get("deliverables", [])
        self.created_at = datetime.now().isoformat()

    def to_dict(self):
        return {
            "objectives": self.objectives,
            "target": self.target,
            "initial_access": self.initial_access,
            "operation_mode": self.operation_mode,
            "information_level": self.information_level,
            "adversary_profile": self.adversary_profile,
            "detail_level": self.detail_level,
            "mission_context": self.mission_context,
            "mission_duration": self.mission_duration,
            "resources": self.resources,
            "constraints": self.constraints,
            "deliverables": self.deliverables,
            "created_at": self.created_at
        }

    def save(self, base_dir="missions", scenario_md=None, ttps=None, sigma_rules=None):
        """
        Save the mission and all related artifacts in a dedicated timestamped subfolder.
        
        Arguments:
        - base_dir: parent directory for missions
        - scenario_md: string containing the scenario markdown content
        - ttps: list of extracted TTP dicts (from extract_ttps_from_text)
        - sigma_rules: list of tuples (rule_name, rule_content) for sigma rules
        
        This method will:
        - Create a subfolder named mission_YYYYmmdd_HHMMSS
        - Save mission JSON
        - Save scenario.md (if given)
        - Save ttps JSON (if given)
        - Save Sigma rules in sigma/ subfolder (if given)
        - Generate README.md
        - Zip the whole mission folder into mission_YYYYmmdd_HHMMSS.zip
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        mission_folder = os.path.join(base_dir, f"mission_{timestamp}")
        os.makedirs(mission_folder, exist_ok=True)

        # Save mission JSON
        mission_path = os.path.join(mission_folder, f"mission_{timestamp}.json")
        with open(mission_path, "w", encoding="utf-8") as f:
            json.dump(self.to_dict(), f, indent=4)

        console.print(f"üíæ Mission JSON saved to [green]{mission_path}[/green]")

        # Save scenario markdown if provided
        if scenario_md:
            md_path = os.path.join(mission_folder, "scenario.md")
            with open(md_path, "w", encoding="utf-8") as f:
                f.write(scenario_md)
            console.print(f"üìÑ Scenario markdown saved to [green]{md_path}[/green]")

        # Save extracted TTPs if any
        if ttps:
            ttps_path = os.path.join(mission_folder, f"mission_ttps_{timestamp}.json")
            with open(ttps_path, "w", encoding="utf-8") as f:
                json.dump(ttps, f, indent=4)
            console.print(f"üìò TTPs saved to [green]{ttps_path}[/green]")

        # Save Sigma rules if any
        if sigma_rules:
            sigma_dir = os.path.join(mission_folder, "sigma")
            os.makedirs(sigma_dir, exist_ok=True)
            for rule_name, rule_content in sigma_rules:
                rule_file = os.path.join(sigma_dir, f"{rule_name}.yml")
                with open(rule_file, "w", encoding="utf-8") as f:
                    f.write(rule_content)
            console.print(f"üõ°Ô∏è Sigma rules saved to [green]{sigma_dir}[/green]")

        # Generate README.md
        self._generate_readme(mission_folder)

        # Zip mission folder
        zip_path = os.path.join(base_dir, f"mission_{timestamp}.zip")
        self._zip_directory(mission_folder, zip_path)
        console.print(f"üóúÔ∏è Mission folder zipped to [green]{zip_path}[/green]")

        return mission_folder

    def _generate_readme(self, mission_dir):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        content = f"""# üìò Red Team Scenario ‚Äì Generated by PCYBOX

**Generated on:** {timestamp}

## üìÇ Files in this package:

- `scenario.md` ‚Äì Full red team scenario in Markdown
- `mission_ttps_*.json` ‚Äì Extracted MITRE ATT&CK techniques (with metadata)
- `sigma/` ‚Äì Directory containing YAML Sigma rules per step
- `mission_*.json` ‚Äì Mission data JSON
- `mission_*.zip` ‚Äì Zipped archive of the mission folder

## Purpose

This package supports **red team operations** (execution) and **blue team engineering** (detections).

Use it for:
- Red team simulations
- Blue team detection rule generation
- Purple teaming and training labs

"""
        readme_path = os.path.join(mission_dir, "README.md")
        with open(readme_path, "w", encoding="utf-8") as f:
            f.write(content)
        console.print(f"üìñ README generated at [green]{readme_path}[/green]")

    def _zip_directory(self, folder_path, output_zip_path):
        with zipfile.ZipFile(output_zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, _, files in os.walk(folder_path):
                for file in files:
                    full_path = os.path.join(root, file)
                    rel_path = os.path.relpath(full_path, start=folder_path)
                    zipf.write(full_path, arcname=rel_path)
